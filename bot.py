import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from datetime import datetime

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_ID = 494237449  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

questions = [
    ("–Ø –ø–æ–≤—ã—à–∞—é –≥–æ–ª–æ—Å –∏–ª–∏ —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º, –∫–æ–≥–¥–∞ —á—É–≤—Å—Ç–≤—É—é —É–≥—Ä–æ–∑—É.", "Fight"),
    ("–Ø –ø—ã—Ç–∞—é—Å—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –∏–ª–∏ –º—ã—Å–ª–µ–Ω–Ω–æ —É–π—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏.", "Flight"),
    ("–Ø –∑–∞–º–∏—Ä–∞—é –∏ –Ω–µ –º–æ–≥—É –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.", "Freeze"),
    ("–Ø —Å—Ç–∞—Ä–∞—é—Å—å —É–≥–æ–¥–∏—Ç—å –¥—Ä—É–≥–∏–º, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∏—Ä, –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω.", "Fawn"),
    ("–Ø —á—É–≤—Å—Ç–≤—É—é –ø—Ä–∏–ª–∏–≤ –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω–∞ –∏ –≥–æ—Ç–æ–≤–ª—é—Å—å ¬´–¥–∞—Ç—å –æ—Ç–ø–æ—Ä¬ª.", "Fight"),
    ("–ú–Ω–µ —Ö–æ—á–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–±–µ–∂–∞—Ç—å.", "Flight"),
    ("–Ø —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞—é—Å—å –∏–ª–∏ —á—É–≤—Å—Ç–≤—É—é –æ—Ü–µ–ø–µ–Ω–µ–Ω–∏–µ.", "Freeze"),
    ("–Ø —Å—Ä–∞–∑—É —Å—Ç–∞—Ä–∞—é—Å—å —É–≥–æ–¥–∏—Ç—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞.", "Fawn"),
]

scenarios = [
    {
        "text": "–°—Ü–µ–Ω–∞—Ä–∏–π 1: –ö–æ–ª–ª–µ–≥–∞ –∫—Ä–∏—Ç–∏–∫—É–µ—Ç –≤–∞—Å –ø—Ä–∏ –≤—Å–µ—Ö.",
        "options": [
            ("–°–ø–æ—Ä—é –∏–ª–∏ –∑–∞—â–∏—â–∞—é—Å—å.", "Fight"),
            ("–£—Ö–æ–∂—É –∏–ª–∏ –∏–∑–±–µ–≥–∞—é —á–µ–ª–æ–≤–µ–∫–∞.", "Flight"),
            ("–ú–æ–ª—á—É –∏ –∑–∞–º–∏—Ä–∞—é.", "Freeze"),
            ("–ò–∑–≤–∏–Ω—è—é—Å—å/—Å–æ–≥–ª–∞—à–∞—é—Å—å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∏—Ä.", "Fawn"),
        ]
    },
    {
        "text": "–°—Ü–µ–Ω–∞—Ä–∏–π 2: –ö—Ç–æ-—Ç–æ –∏–∑–¥–∞–µ—Ç –≥—Ä–æ–º–∫–∏–π / —Ä–µ–∑–∫–∏–π –∑–≤—É–∫ –∑–∞ —Å–ø–∏–Ω–æ–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏.",
        "options": [
            ("–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é—Å—å –∏ —Ç—Ä–µ–±—É—é –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.", "Fight"),
            ("–ë—ã—Å—Ç—Ä–æ –æ—Ç—Ö–æ–∂—É.", "Flight"),
            ("–ó–∞–º–∏—Ä–∞—é.", "Freeze"),
            ("–°–º–µ—é—Å—å –∏–ª–∏ —à—É—á—É, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ.", "Fawn"),
        ]
    },
    {
        "text": "–°—Ü–µ–Ω–∞—Ä–∏–π 3: –î—Ä—É–≥ –∑–∞–±—ã–ª –≤–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.",
        "options": [
            ("–ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é –∏ –∑–ª—é—Å—å.", "Fight"),
            ("–ò–∑–±–µ–≥–∞—é –æ–±—â–µ–Ω–∏—è.", "Flight"),
            ("–ß—É–≤—Å—Ç–≤—É—é —Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å.", "Freeze"),
            ("–ì–æ–≤–æ—Ä—é, —á—Ç–æ —ç—Ç–æ –µ—Ä—É–Ω–¥–∞.", "Fawn"),
        ]
    },
]

QUESTION, SCENARIO = range(2)

reaction_labels = {
    "Fight": "–ë–æ—Ä—å–±–∞ ‚Äì –∞–≥—Ä–µ—Å—Å–∏—è, –∫–æ–Ω—Ñ—Ä–æ–Ω—Ç–∞—Ü–∏—è",
    "Flight": "–ë–µ–≥—Å—Ç–≤–æ ‚Äì –∏–∑–±–µ–≥–∞–Ω–∏–µ, –ø–æ–±–µ–≥",
    "Freeze": "–ó–∞–º–∏—Ä–∞–Ω–∏–µ ‚Äì –æ—Ü–µ–ø–µ–Ω–µ–Ω–∏–µ, —Å—Ç—É–ø–æ—Ä",
    "Fawn": "–£–≥–æ–¥–Ω–∏—á–µ—Å—Ç–≤–æ ‚Äì –ø–æ–ø—ã—Ç–∫–∞ —É–≥–æ–¥–∏—Ç—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞",
}

def restart_keyboard():
    return ReplyKeyboardMarkup([["–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"]], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Ä–µ–∞–∫—Ü–∏–π!\n\n"
        "–≠—Ç–æ—Ç —Ç–µ—Å—Ç –±—ã–ª –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω —Å –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å.\n"
        "–ê–≤—Ç–æ—Ä –±–æ—Ç–∞: –ø—Å–∏—Ö–æ–ª–æ–≥ @flauriss\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–µ–∞–∫—Ü–∏—è—Ö –Ω–∞ —Å—Ç—Ä–µ—Å—Å: t.me/psysredaa/46\n\n"
        "_(–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–∞–Ω–Ω—ã–π –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º –∏ —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π.)_"
    )
    await update.message.reply_text(welcome_text, parse_mode="Markdown", reply_markup=restart_keyboard())
    await update.message.reply_text("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /test.")

async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["current_q"] = 0
    context.user_data["scores"] = {"Fight": 0, "Flight": 0, "Freeze": 0, "Fawn": 0}

    intro_text = (
        "*I. –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Ä–µ–∞–∫—Ü–∏–π*\n"
        "_–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:_ –û—Ü–µ–Ω–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∫–∞–∂–¥–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–π —Ä–µ–∞–∫—Ü–∏–∏ –≤ —Å—Ç—Ä–µ—Å—Å–µ "
        "(1 ‚Äì –ù–∏–∫–æ–≥–¥–∞, 5 ‚Äì –í—Å–µ–≥–¥–∞)."
    )
    await update.message.reply_text(intro_text, parse_mode="Markdown")

    return await ask_question(update, context)

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q_index = context.user_data["current_q"]
    if q_index < len(questions):
        question_text, _ = questions[q_index]
        keyboard = ReplyKeyboardMarkup(
            [["1", "2", "3", "4", "5"], ["–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"]],
            one_time_keyboard=False, resize_keyboard=True
        )
        await update.message.reply_text(
            f"{q_index + 1}. {question_text}\n(–û—Ç–≤–µ—Ç—å—Ç–µ –æ—Ç 1 –¥–æ 5)",
            reply_markup=keyboard
        )
        return QUESTION
    else:
        return await start_scenarios(update, context)

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text.strip()
    if answer.lower() == "–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        return await start(update, context)

    if answer not in ["1", "2", "3", "4", "5"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return QUESTION

    score = int(answer)
    q_index = context.user_data["current_q"]
    _, category = questions[q_index]
    context.user_data["scores"][category] += score
    context.user_data["current_q"] += 1

    return await ask_question(update, context)

async def start_scenarios(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["scenario_index"] = 0
    context.user_data["scenario_scores"] = {"Fight": 0, "Flight": 0, "Freeze": 0, "Fawn": 0}
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ —Ç–µ—Å—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–π –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞.")
    return await ask_scenario(update, context)

async def ask_scenario(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = context.user_data["scenario_index"]
    if index < len(scenarios):
        s = scenarios[index]
        options = [[opt[0]] for opt in s["options"]]
        options.append(["–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"])
        keyboard = ReplyKeyboardMarkup(options, one_time_keyboard=False, resize_keyboard=True)
        await update.message.reply_text(s["text"], reply_markup=keyboard)
        return SCENARIO
    else:
        return await show_final_results(update, context)

async def handle_scenario_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text.strip()
    if answer.lower() == "–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        return await start(update, context)

    index = context.user_data["scenario_index"]
    s = scenarios[index]

    matched = [cat for text, cat in s["options"] if text == answer]
    if not matched:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return SCENARIO

    category = matched[0]
    context.user_data["scenario_scores"][category] += 1
    context.user_data["scenario_index"] += 1
    return await ask_scenario(update, context)

async def show_final_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    scores = context.user_data["scores"]
    scenario_scores = context.user_data["scenario_scores"]

    combined = {k: scores[k] + scenario_scores[k] * 2 for k in scores}
    result_lines = [f"{reaction_labels[k]}: {combined[k]} –±–∞–ª–ª–æ–≤" for k in combined]

    dominant = max(combined, key=combined.get)
    sorted_types = sorted(combined.items(), key=lambda x: x[1], reverse=True)
    secondary = sorted_types[1][0]

    result_text = (
        "üß† –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n" +
        "\n".join(result_lines) +
        f"\n\nüîπ –í–µ–¥—É—â–∞—è —Ä–µ–∞–∫—Ü–∏—è: *{reaction_labels[dominant]}*\n"
        f"üî∏ –ó–∞–ø–∞—Å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è: *{reaction_labels[secondary]}*\n\n"
        "–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–≤–æ–∏ –≤—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ –º–æ–¥–µ–ª–∏ \"–±–µ–π-–±–µ–≥–∏-–∑–∞–º—Ä–∏-—É–≥–æ–∂–¥–∞–π\".\n\n"
        "*–í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å:* –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ–∞–∫—Ü–∏–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –º–µ—Ö–∞–Ω–∏–∑–º—ã –≤—ã–∂–∏–≤–∞–Ω–∏—è.\n"
        "–û–¥–Ω–∞–∫–æ –ø—Ä–∏ —Ç—Ä–∞–≤–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–ø—ã—Ç–µ –æ–Ω–∏ –º–æ–≥—É—Ç –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å—Å—è —Å–ª–∏—à–∫–æ–º –∂–µ—Å—Ç–∫–æ ‚Äî –≤ —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.\n\n"
        "–¢–µ—Å—Ç –¥–∞–µ—Ç –ª–∏—à—å –æ–±—â–µ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ –≤–∞—à–∏—Ö —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—è—Ö, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤:\n"
        "‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–∏—Ç—É–∞—Ü–∏–∏,\n"
        "‚Äî –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è,\n"
        "‚Äî –ø—Ä–æ—à–ª–æ–≥–æ –æ–ø—ã—Ç–∞.\n\n"
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª—É—á—à–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–∫ —Ç–æ—á–∫—É –¥–ª—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.\n\n"
        "*–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞!*\n"
        "–ê —Ç–∞–∫–∂–µ –ø—Ä–∏–≥–ª–∞—à–∞—é –≤–∞—Å –≤ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª [psysredaa](https://t.me/psysredaa) –∏ –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
    )

    await update.message.reply_text(result_text, parse_mode="Markdown", reply_markup=restart_keyboard())

    username = update.effective_user.username or f"id_{update.effective_user.id}"
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
    short_result = ", ".join([f"{k}: {v}" for k, v in combined.items()])
    admin_message = (
        f"üìú –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç @{username} ({timestamp}):\n"
        f"{short_result}\n"
        f"–í–µ–¥—É—â–∞—è: {reaction_labels[dominant]}"
    )

    await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=restart_keyboard())
    return ConversationHandler.END

def main():
    if not TOKEN:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –∑–∞–¥–∞–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ.")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("test", test)],
        states={
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
            SCENARIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_scenario_answer)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Regex("^–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ$"), start))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()

#python bot.py
